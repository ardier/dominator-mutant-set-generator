import csv
import os.path
import pickle
import random
from typing import Optional

import numpy as np

import average_taker as at
import plot_tools as pt
from dominator_mutants import convert_csv_to_killmap, \
    convert_csv_to_unique_killmap, \
    convert_csv_to_unique_reverse_killmap
# results_dir is the directory where the results are stored is
from naturalness_tools import generate_mutant_to_token_mapping, generate_scores, \
    combine_mapping, natural_offset_killmap
from statistics import bug_stats


def generate_naturalness(results_dir):
    """ Generates the work evaluation for all natural mutants.

    It grabs the csv/mml files generated by major framework for natural
    mutants. Then, it creates a plot that illustrates the test completeness
    achieved for all natural mutants generated for a given bug.
    See documentation for convert_csv_to_killmap,
        convert_csv_to_reverse_killmap, generate_scores,
        combine_mapping, and generate_eval_plot for more details

    :param results_dir: str
                        The directory containing the results files from
                        tailored mutant data
    :return: tuple (list[int], int)
                    A tuple containing a list of y-cordinates (as a percentage)
                    for the work evaluation for all natural mutants. and the
                    number of mutants for the evaluation
    """

    # keeping the count of all plots and counts
    plots: Optional[list] = list()
    counts: Optional[list] = list()

    dirpath = results_dir + "natural-mutants\\non-triggering"

    # step 2 fetch the killmap
    killmap = convert_csv_to_unique_killmap(
        os.path.join(dirpath, "killMap.csv"))
    rev_killmap = convert_csv_to_unique_reverse_killmap(os.path.join(dirpath,
                                                                     "killMap.csv"))

    #  getting the total number of mutants for
    total_number_of_mutants = 0
    for mutant in killmap.keys():
        total_number_of_mutants += len(mutant)

    # step 3 in a dictionary (may have to change this) containing from the mutant identifier to token identifiers:
    #  {mutantID: token, sub-token} . the sub-token would be -1 if itâ€™s the default subtoken.

    log_file_path = os.path.join(dirpath, "mutants.log")
    mutant_token_sub_mapping: Optional[dict] = \
        (generate_mutant_to_token_mapping(log_file_path))

    # step 4.1
    mml_file_path = os.path.join(dirpath, "mml_confidence_data.csv")
    token_to_score_mapping: Optional[dict] = generate_scores(mml_file_path)

    # step 4.2
    mutant_to_scores_mapping = combine_mapping(mutant_token_sub_mapping,
                                               token_to_score_mapping)

    # Filter mutant_to_scores_mapping for mutants only in the killmap
    filtererd_mutant_to_scores_mapping: Optional[dict] = dict()
    for mutant in mutant_to_scores_mapping.keys():
        for killmap_mutants in killmap.keys():
            if mutant in killmap_mutants:
                filtererd_mutant_to_scores_mapping[killmap_mutants] = \
                    mutant_to_scores_mapping[mutant]

    # step 5
    # randomize mutants
    sorted_mutants = sorted(filtererd_mutant_to_scores_mapping.keys(),
                            key=lambda i:
                            -np.log(filtererd_mutant_to_scores_mapping[i][0] /
                                    filtererd_mutant_to_scores_mapping[i][1]))

    work_eval_plot = pt.generate_eval_plot(sorted_mutants, killmap, rev_killmap,
                                           total_number_of_mutants)
    plots.append(work_eval_plot[0])
    counts.append(work_eval_plot[1])
    return plots, counts


# TODO document
# TODO consider moving
# TODO factor shared code out
def plot_traditional_naturalness(results_dir):
    dirpath = results_dir + "\\traditional-mutants\\non-triggering\\"
    killmap_file = "killMap.csv"
    killmap = convert_csv_to_unique_killmap(os.path.join(dirpath, killmap_file))
    killmap_length = len(
        convert_csv_to_killmap(os.path.join(dirpath, killmap_file)))
    rev_killmap = convert_csv_to_unique_reverse_killmap(
        os.path.join(dirpath, killmap_file))

    # get the sorted list of mutants
    csv_filename = os.path.join(dirpath, "traditional_naturalness.csv")
    with open(csv_filename, newline='') as File:
        sorted_mutants_list = []
        reader = csv.reader(File)
        readerSize = csv.reader(File)

        # # skipping the header
        # next(reader)
        print(readerSize)
        empty_csv_check = next(readerSize, "empty")
        if empty_csv_check != "empty" and len(empty_csv_check) == 1:

            for k, _, _ in reader:
                # converting to integers
                for killmap_keys in killmap.keys():
                    if int(
                            k) in killmap_keys and killmap_keys not in sorted_mutants_list:
                        sorted_mutants_list.append(killmap_keys)

    print(sorted_mutants_list)
    plot = pt.generate_eval_plot(sorted_mutants_list, killmap, rev_killmap,
                                 killmap_length)
    return plot


# TODO document
def plot_generator(results_dir, type):
    if type != "all-mutants":
        dirpath = results_dir + "\\" + type + "\\non-triggering"
        killmap_file = "killMap.csv"
    else:
        dirpath = ""
        killmap_file = "temp_killMap.csv"
    killmap = convert_csv_to_killmap(os.path.join(dirpath, killmap_file))
    result = pt.generate_test_completeness_plot(killmap)
    return result


# TODO fix documentation
def bestcase_generator(results_dir, type):
    """

        It grabs the csv/mml files generated by major framework for traditional
        mutants. Then, it creates a plot that illustrates the test completeness
        achieved for random traditional mutants generated for a given bug.
        See documentation for convert_csv_to_killmap,
        convert_csv_to_reverse_killmap, generate_scores,
        combine_mapping, and generate_eval_plot for more details

        :param results_dir: str
                            The directory containing the results files from
                            tailored mutant data
        :return: tuple (list[int], int)
                        A tuple containing a list of y-cordinates (as a percentage)
                        for the work evaluation for random traditional mutants
                        and the number of mutants for the evaluation
    """

    if type != "all-mutants":
        dirpath = results_dir + "\\" + type + "\\non-triggering"
        killmap_file = os.path.join(dirpath, "killMap.csv")

    else:

        dirpath = ""
        killmap_file = os.path.join(dirpath, "temp_killMap.csv")

    killmap = convert_csv_to_unique_killmap(killmap_file)
    rev_killmap = convert_csv_to_unique_reverse_killmap(killmap_file)

    #  getting the total number of mutants for
    total_number_of_mutants = 0
    for mutant in killmap.keys():
        total_number_of_mutants += len(mutant)

    killmap_mutants = killmap.keys()
    list_of_mutant: Optional[list] = list()
    for mutant in killmap_mutants:
        list_of_mutant.append(mutant)

    randomized_mutants = random.sample(list_of_mutant, len(killmap))

    random_eval_plot = pt.generate_eval_plot(
        randomized_mutants, killmap, rev_killmap,
        total_number_of_mutants)
    return random_eval_plot


if __name__ == "__main__":
    import sys

    debug = True

    if len(sys.argv) != 2:
        print("Usage <resultsPath>")
        sys.exit(-1)
    for i in range(1, 2):
        # for i in [14, 21, 30, 31, 33, 34, 41, 42, 57, 62]:
        results_dir = sys.argv[1] + "Lang\\" + str(i) + "\killmatrix\\"

        # try:
        print("currently generating graph for:", i)
        results_dir = sys.argv[1] + "Lang\\" + str(i) + "\killmatrix\\"
        if debug:
            print("Calculating natural_bestcase")
        natural_bestcase = plot_generator(results_dir, "natural-mutants")
        if debug:
            print("natural_naturalness")
        natural_naturalness = generate_naturalness(results_dir)
        if debug:
            print("traditional_bestcase")
        traditional_bestcase = plot_generator(results_dir,
                                              "traditional-mutants")
        if debug:
            print("natural_random")
        natural_random = at.mutants_average(
            results_dir, "natural-mutants", 10)

        # all_random = all_random_generator(results_dir)[0]

        # create combined killmap for all \

        if debug:
            print("setting offset killmap")
        natural_offset_killmap(results_dir)

        if debug:
            print("all_bestcase")
        all_bestcase = plot_generator(results_dir, "all-mutants")

        if debug:
            print("all_random")
        all_random = at.mutants_average(
            results_dir, "all-mutants", 10)

        # TODO
        if debug:
            print("all_naturalness")
        all_naturalness = at.mutants_average(
            results_dir, "all-mutants", 10)

        # TODO
        if debug:
            print("traditional_naturalness")
        traditional_naturalness = plot_traditional_naturalness(results_dir)

        if debug:
            print("traditional_random")
        traditional_random = at.mutants_average(
            results_dir, "traditional-mutants", 10)

        # removing the temp file
        if debug:
            print("removing temp_killMap.csv")
        os.remove("temp_killMap.csv")

        if debug:
            print("plotting")

        plots = [traditional_bestcase,
                 traditional_random,
                 natural_bestcase,
                 natural_naturalness[0][0],
                 natural_random,
                 all_bestcase,
                 all_random,
                 traditional_naturalness[0]
                 ]

        if debug:
            print("Saving bug data")
            data = [i, plots]
            pklfilehandler = open("pickled_data\\" + "plots_" + str(i) +
                                  ".pkl",
                                  'wb')
            pickle.dump(data, pklfilehandler)
        bug_stats(i, plots)

        # except:
        #     print("skipping bug number: ", i)
        #     continue
